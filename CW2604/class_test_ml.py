# -*- coding: utf-8 -*-
"""class_test_ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OrD5aj6t5922Ggaqi7fDJjak03oVt1mq
"""

import torch
from torchvision import datasets, transforms
import helper



# data loading

## Step 1
!git clone https://github.com/YoongiKim/CIFAR-10-images



## Step 2
# Activate CUDA on Google Colab

# check if CUDA is available
train_on_gpu = torch.cuda.is_available()

if not train_on_gpu:
    print('CUDA is not available.  Training on CPU ...')
else:
    print('CUDA is available!  Training on GPU ...')



## Step 3
# Define data transformations to facilitate data augmentation and normalization
# E.g., flip, rotation, translation, to_tensor, normalize

train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor(),
                                       transforms.Normalize([0.5, 0.5, 0.5], 
                                                            [0.5, 0.5, 0.5])])



data_dir = 'Cat_Dog_data'

# TODO: Define transforms for the training data and testing data
train_transforms = transforms.Compose([transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.ToTensor()]) 

test_transforms = transforms.Compose([transforms.Resize(255),
                                      transforms.CenterCrop(224),
                                      transforms.ToTensor()])


# Pass transforms in here, then run the next cell to see how the transforms look
train_data = datasets.ImageFolder(data_dir + '/train', transform=train_transforms)
test_data = datasets.ImageFolder(data_dir + '/test', transform=test_transforms)

trainloader = torch.utils.data.DataLoader(train_data, batch_size=32)
testloader = torch.utils.data.DataLoader(test_data, batch_size=32)



## Step 4
# Write your custom data loader. Define train, validation and test dataloader



import os
p=[]
c=[]
for file_name in os.listdir("CIFAR-10-images/test/"):
  for files in os.listdir("CIFAR-10-images/test/"+file_name):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        #img = cv2.imread("CIFAR-10-images/test/airplane/0000.jpg" + file_name)
        #print('CIFAR-10-images/test/'+file_name+'/'+files, file_name)
        #dataset.append([['CIFAR-10-images/test/'+file_name+'/'+files , file_name]])
        path='CIFAR-10-images/test/'+file_name+'/'+files
        clss=file_name
        p.append(path)
        c.append(clss)


import pandas as pd
test_data_set=pd.DataFrame({'path':p,'clss':c})
test_data_set.to_csv("test_data_set",index=False)

test_data_set

import os
p=[]
c=[]
for file_name in os.listdir("CIFAR-10-images/train/"):
  for files in os.listdir("CIFAR-10-images/train/"+file_name):
    if files.split(".")[-1].lower() in {"jpeg", "jpg", "png"}:
        #img = cv2.imread("CIFAR-10-images/test/airplane/0000.jpg" + file_name)
        #print('CIFAR-10-images/test/'+file_name+'/'+files, file_name)
        #dataset.append([['CIFAR-10-images/test/'+file_name+'/'+files , file_name]])
        path='CIFAR-10-images/train/'+file_name+'/'+files
        clss=file_name
        p.append(path)
        c.append(clss)


import pandas as pd
train_data_set=pd.DataFrame({'path':p,'clss':c})

train_data_set.to_csv("train_data_set",index=False)

train_data_set

pd.read_csv("/content/test_data_set")



class MyDataset():
  def __init__(self,image_set,argument=True):
    with open(image_set,"r") as csv_handle:
      csv_reader = csv.reader(csv_handle,delimiter=",")
      self.imgfiles=[eachline[0] for eachline in csv_reader]
    self.argument=argument
  def __len__(self):
    return len(self.imgfiles)
  def __gititem__(self,idx):
    img=imageio.imread(self.imgfiles[idx])
    X=np.asarray(img,dtype=np.float32)
    if self.argument:
      X=do_yarn_transform(X)
    Y=self.classlabels[idx]
    return X,Y

def do_your_transform(X):
  class MyDataset(Dataset):
    def __init__(self,image_set,augment=True):
      with open(image_set,"r") as csv.handle:
        csv_reader= csv.reader(csv_handle,delimiter=',')
        self.imgfiles=[eachline[0] for eachline in csv_reader]

      with open(image_set,'r') as csv_handle:
        csv_reader=csv.reader(csv_handle,delimiter=',')
        self.classlabels=[int(eachline[1]) for eachline in csv_reader]

      self.augment=augment

    def __len__(self):
      return len(selg.imgfiles)

    def __getitem__(self,idx):
      img = imageio.imread(self.imgfiles[idx])
      X=np.asarray(img,dtype=np.float32)

      if self.augment:
        X=do_your_transform(X)
      Y=self.classlabels[idx]
      return X,Y



trainloader = torch.utils.data.DataLoader(train_data_set, batch_size=32)
testloader = torch.utils.data.DataLoader(test_data_set, batch_size=32)

trainloader



for i,j in trainloader:
  print(i.shape)





## Step 5 (OPTIONAL)
# Visualize a batch of train (2 x n_class) and test data (2 x n_classes)

# change this to the trainloader or testloader 
data_iter = iter(testloader)

images, labels = next(data_iter)
fig, axes = plt.subplots(figsize=(10,4), ncols=4)
for ii in range(4):
    ax = axes[ii]
    helper.imshow(images[ii], ax=ax, normalize=False)



## Step 6
# model = CNN(n_hidden_layers, n_output)









## Step 7
# Define loss and solver
# criterion = ...
# optimizer = ...







## Step 8
# train_with_validation
# train(n_epoch, model_filename, criterion, optimizer)







## Step 9
# Evaluation with inference: load model
# performance = test(model_filename) # total accuracy













## Step 10
# Push the .py files to MLS2021 github with branchname CW2604
# There should be a main.py
# performance.txt













